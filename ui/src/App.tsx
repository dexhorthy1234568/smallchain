import { useEffect, useState, useRef, useLayoutEffect } from "react";
import { useSWRFetch } from "@/lib/utils.ts";
import "./App.css";
import { ChatCompletionMessageToolCall } from "openai/resources/chat/completions";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { App2 } from "@/components/app2";
import { Badge } from "@/components/ui/badge";

/**
 * fork of openAI type with any role allowed
 */
export type ChatCompletionMessageWithAnyRole = {
  /**
 * The contents of the message.
 */
  content: string | null;

  /**
   * The refusal message generated by the model.
   */
  refusal: string | null;

  /**
   * The role of the author of this message.
   */
  role: "user" | "assistant" | "tool" | "system"

  /**
   * The tool calls generated by the model, such as function calls.
   */
  tool_calls?: Array<ChatCompletionMessageToolCall>;
}

export type ClientChain = {
  id: number
  // agent name
  agent_name?: string
  messages: (ChatCompletionMessageWithAnyRole)[]
  created_at: string
  updated_at: string
  status:
  | "awaiting_llm_processing"
  | "llm_processing"
  | "stop_awaiting_user"
  | "awaiting_function_call"
  parent_external_function_call_id?: string
}

export type Agent = {
  id?: number
  system_prompt: string
  name: string
  tools: any[]
  delegation_tool?: {
    description?: string
  }
}

export default function App() {
  let { data, mutate } = useSWRFetch<ClientChain[]>("/api/chains")
  const [newThread, setNewThread] = useState("");
  const [selectedChain, setSelectedChain] = useState<ClientChain | null>(null);
  const chainRefs = useRef<{ [key: number]: HTMLDivElement | null }>({});

  // Add this new state to store agent colors
  const [agentColors, setAgentColors] = useState<{ [key: string]: { hue: number, color: string } }>({});

  // Add this function to generate a color for each agent
  const getAgentColor = (agentName: string) => {
    if (!agentColors[agentName]) {
      const nextHue = Math.floor(Math.random() * 360);
      const allHues = Object.values(agentColors).map(agent => agent.hue);
      // if the next hue is within 90 degrees of any existing hue, regenerate it
      if (allHues.some(hue => Math.abs(hue - nextHue) < 90)) {
        return getAgentColor(agentName);
      }

      setAgentColors(prev => ({
        ...prev,
        [agentName]: {
          hue: nextHue,
          color: `hsl(${nextHue}, 80%, 80%)`,
        }
      }));
    }
    return agentColors[agentName]?.color;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newThread.trim()) return;

    const response = await fetch("/api/chains", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        agent_name: "project_manager",
        userMessage: newThread,
      }),
    });

    if (response.ok) {
      const result = await response.json();
      setNewThread("");
      await mutate();
      // Select the newly created chain
      const newChain = data?.find(chain => chain.id === result.id);
      if (newChain) {
        setSelectedChain(newChain);
      }
    }
  };

  useEffect(() => {
    const interval = setInterval(() => {
      mutate()
    }, 200)
    return () => clearInterval(interval)
  }, [])

  // Add this new useEffect to select the first thread
  useEffect(() => {
    if (data && data.length > 0 && !selectedChain) {
      setSelectedChain(data[0]);
    }
  }, [data, selectedChain]);

  if (!data) {
    return <div>Loading...</div>
  }

  // Sort the data by the created_at timestamp in ascending order (oldest first)
  data = data.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());

  const statusOptions = [
    'awaiting_llm_processing',
    'llm_processing',
    'stop_awaiting_user',
    'awaiting_function_call'
  ];

  return (
    <div className="flex flex-col">
      <Tabs defaultValue="grid">
        <TabsList className="flex flex-row gap-4 w-1/2">
          <TabsTrigger value="grid">Grid</TabsTrigger>
          <TabsTrigger value="threads">Threads</TabsTrigger>
          <TabsTrigger value="components">Components</TabsTrigger>
        </TabsList>
        <TabsContent value="grid">
          <App2 />
        </TabsContent>
        <TabsContent value="threads">
          <div className="bg-gray-900 min-h-screen text-white p-4 w-screen flex">
            <div className="w-1/3 pr-4 flex flex-col h-screen relative">
              <ThreadForm
                newThread={newThread}
                setNewThread={setNewThread}
                handleSubmit={handleSubmit}
              />
              <div className="flex-grow overflow-y-auto">
                <div className="flex flex-col gap-4 flex-col-reverse">
                  {data.map((chain: ClientChain) => {
                    const firstUserMessage = chain.messages.find(msg => msg.role === 'user')?.content;
                    const chainName = firstUserMessage ? firstUserMessage.slice(0, 30) + (firstUserMessage.length > 30 ? '...' : '') : 'Unnamed Chain';
                    const creationDate = new Date(chain.created_at).toLocaleString(); // Format the creation date
                    const agentColor = getAgentColor(chain.agent_name || 'Unknown');
                    return (
                      <div
                        key={chain.id}
                        ref={el => chainRefs.current[chain.id] = el}
                        className="p-2 rounded-md border-2 cursor-pointer hover:bg-gray-800 flex justify-between items-center"
                        onClick={() => setSelectedChain(chain)}
                        style={{ borderColor: agentColor }}
                      >
                        <div className="flex-grow">
                          <div className="font-bold">{chainName}</div>
                          <div className="text-sm" style={{ color: agentColor }}>Agent: {chain.agent_name || 'Unknown'}</div>
                          <div className="text-sm">Messages: {chain.messages.length}</div>
                          <div className="text-sm text-gray-400">Created: {creationDate}</div>
                          <div className="flex mt-2">
                            {chain.messages.map((msg, index) => (
                              <div
                                key={index}
                                className={`w-2 h-2 rounded-full mr-1 ${msg.role === 'user' ? 'bg-cyan-400' :
                                  msg.role === 'assistant' ? 'bg-violet-400' :
                                    msg.role === 'tool' ? 'bg-white text-gray-800' :
                                      'bg-gray-700'
                                  }`}
                              />
                            ))}
                          </div>
                        </div>
                        <div className={`text-xs px-2 py-1 rounded-full ${chain.status === 'awaiting_llm_processing' ? 'bg-violet-700 text-white' :
                          chain.status === 'llm_processing' ? 'bg-violet-700 text-white' :
                            chain.status === 'stop_awaiting_user' ? 'bg-gray-700 text-white' :
                              chain.status === 'awaiting_function_call' ? 'bg-gray-200 text-gray-900' :
                                'bg-gray-700 text-white'
                          }`}>
                          {chain.status}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
            <div className="w-2/3 pl-4 border-l border-gray-700 flex flex-col h-screen">
              <div className="flex-grow overflow-y-auto">
                {selectedChain ? (
                  <div className="flex flex-col gap-4 p-4">
                    {selectedChain.messages.map((message: ChatCompletionMessageWithAnyRole) => (
                      <MessageNode key={message.content || message.tool_calls?.[0]?.id} message={message} />
                    ))}
                    {selectedChain.status === "stop_awaiting_user" && (
                      <StatusIndicator status={selectedChain.status} />
                    )}
                  </div>
                ) : (
                  <div className="text-center text-gray-500 p-4">Select a chain to view messages</div>
                )}
              </div>
            </div>
          </div>
        </TabsContent>
        <TabsContent value="components">
          <div className="p-4 bg-gray-900 min-h-screen text-white">
            <h2 className="text-2xl font-bold mb-4">Status Badges</h2>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
              {statusOptions.map((status) => (
                <div key={status} className="flex flex-col items-center gap-2">
                  <Badge
                    className={`text-xs px-2 py-1 rounded-full ${status === 'awaiting_llm_processing' ? 'bg-violet-400 text-white' :
                      status === 'llm_processing' ? 'bg-violet-700 text-white' :
                        status === 'stop_awaiting_user' ? 'bg-gray-700 text-white' :
                          status === 'awaiting_function_call' ? 'bg-gray-200 text-gray-900' :
                            'bg-gray-700 text-white'
                      }`}
                  >
                    {status}
                  </Badge>
                  <span className="text-sm">{status}</span>
                </div>
              ))}
            </div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}

const MessageNode = ({ message }: { message: ChatCompletionMessageWithAnyRole }) => {
  const baseClassName = "p-2 rounded-md w-full border-2 ";
  const roleSpecificClass = {
    user: "bg-cyan-400 text-gray-900",
    assistant: message.tool_calls ? "bg-violet-500" : "bg-violet-400",
    tool: "bg-white text-gray-800",
    system: "bg-gray-700 text-gray-50",
  }[message.role] || "bg-gray-900 text-white";

  const className = baseClassName + roleSpecificClass;

  if (message.tool_calls) {
    return message.tool_calls.map((toolCall: ChatCompletionMessageToolCall) => (
      <AssistantToolCallNode key={toolCall.id} toolCall={toolCall} />
    ));
  }

  return (
    <div className={className}>
      <div className="font-bold mb-1">{message.role}</div>
      <div className="text-sm">{message.content}</div>
    </div>
  );
};

const StatusIndicator = ({ status }: { status: string }) => (
  <div className='flex justify-center w-full'>
    <div className="text-xs bg-gray-600 text-white rounded-md p-2">
      {status}
    </div>
  </div>
);

const ThreadForm = ({ newThread, setNewThread, handleSubmit }: {
  newThread: string,
  setNewThread: (value: string) => void,
  handleSubmit: (e: React.FormEvent) => void
}) => (
  <form onSubmit={handleSubmit} className="mb-4 flex gap-2">
    <input
      type="text"
      value={newThread}
      onChange={(e) => setNewThread(e.target.value)}
      onKeyDown={(e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          handleSubmit(e);
        }
      }}
      className="p-2 rounded-md flex-grow text-gray-900 bg-white"
      placeholder="Start a new thread..."
    />
    <Button type="submit" variant="default">
      Submit
    </Button>
  </form>
);

const AssistantToolCallNode = ({ toolCall }: { toolCall: ChatCompletionMessageToolCall }) => (
  <div key={toolCall.id} className="p-2 rounded-md w-full bg-violet-400 border-2 text-gray-900">
    <div className="font-bold mb-1">assistant (tool call)</div>
    <pre className="bg-gray-800 p-2 rounded text-white overflow-x-auto">
      {`${toolCall.function.name}(${toolCall.function.arguments})`}
    </pre>
  </div>
);

const ConnectionLine = ({ fromId, toId, refs }: {
  fromId: number,
  toId: number,
  refs: React.MutableRefObject<{ [key: number]: HTMLDivElement | null }>
}) => {
  const [line, setLine] = useState({ top: 0, height: 0 });

  useLayoutEffect(() => {
    const fromEl = refs.current[fromId];
    const toEl = refs.current[toId];
    if (fromEl && toEl) {
      const fromRect = fromEl.getBoundingClientRect();
      const toRect = toEl.getBoundingClientRect();
      const top = Math.min(fromRect.top, toRect.top);
      const bottom = Math.max(fromRect.bottom, toRect.bottom);
      setLine({
        top: top,
        height: bottom - top
      });
    }
  }, [fromId, toId, refs]);

  return (
    <div
      style={{
        position: 'absolute',
        left: '10px',
        top: `${line.top}px`,
        width: '2px',
        height: `${line.height}px`,
        backgroundColor: 'rgba(255, 255, 255, 0.3)',
      }}
    />
  );
};
